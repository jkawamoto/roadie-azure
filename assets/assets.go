// Code generated by go-bindata.
// sources:
// assets/Dockerfile
// assets/entrypoint.sh
// assets/init.sh
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsDockerfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x53\x5d\x8f\xdb\x36\x10\x7c\xe7\xaf\x18\xd8\x2f\x09\xe0\xc8\xfd\x78\x28\x70\x0d\x82\xaa\x67\x3b\x51\x73\x27\x1b\xb2\x8c\x83\x11\xe4\x81\x16\x57\x16\x7b\x32\x29\x90\xcb\x13\x54\xc3\xff\xbd\xa0\xce\x69\x7a\x45\xd0\xbc\x89\xab\x99\xe1\xcc\xee\x72\x2a\xa6\x58\xd8\xea\x91\x5c\xad\x5b\x12\xf1\x78\x6b\xbb\xc1\xe9\x63\xc3\x78\x55\xbd\xc6\x4f\x3f\xfc\xf8\x0b\xfe\x08\xa6\x23\x8d\x8f\xb2\x97\x27\xcb\x76\x84\x95\x8d\xf6\x88\x24\x68\x8f\x4e\x3a\x86\xad\x51\x58\xa9\x34\x21\xfd\x2b\x38\x4a\x46\xd8\xbf\x2b\x11\x59\x3b\x22\x78\x5b\x73\x2f\x1d\xdd\x60\xb0\x01\x95\x34\x70\xa4\xb4\x67\xa7\x0f\x81\x09\x9a\x21\x8d\x9a\x5b\x87\x93\x55\xba\x1e\xc4\x34\x96\x82\x51\xe4\xc0\x0d\x81\xc9\x9d\x7c\xbc\x2e\x1e\xde\xe7\x3b\xbc\x27\x43\x4e\xb6\xd8\x84\x43\xab\x2b\xdc\xe9\x8a\x8c\x27\x48\x8f\x2e\x56\x7c\x43\x0a\x87\x28\x13\x09\xab\xe8\x60\x7b\x75\x80\x95\x0d\x46\x49\xd6\xd6\xcc\x40\x9a\x1b\x72\x78\x22\xe7\xb5\x35\xf8\xf9\xcb\x15\x57\xbd\x19\xac\x13\x53\xbc\x92\x1c\x6d\x3b\xd8\x2e\xd2\x5e\x43\x9a\x01\xad\xe4\xaf\xcc\x6f\x27\xff\x1a\x50\x41\x9b\x51\xb8\xb1\x1d\x81\x1b\xc9\x31\x5f\xaf\xdb\x16\x07\x42\xf0\x54\x87\x76\x26\xa6\x38\x04\xc6\x43\x56\x7e\x58\xef\x4a\xa4\xf9\x1e\x0f\x69\x51\xa4\x79\xb9\xff\x15\xbd\xe6\xc6\x06\x06\x3d\xd1\xb3\x92\x3e\x75\xad\x26\x85\x5e\x3a\x27\x0d\x0f\xb0\xb5\x98\xe2\x7e\x59\xdc\x7e\x48\xf3\x32\xfd\x3d\xbb\xcb\xca\x3d\xac\xc3\x2a\x2b\xf3\xe5\x76\x8b\xd5\xba\x40\x8a\x4d\x5a\x94\xd9\xed\xee\x2e\x2d\xb0\xd9\x15\x9b\xf5\x76\x99\x00\x5b\x8a\xa6\x48\x4c\xff\xaf\xb7\xf5\x38\x1d\x47\x50\xc4\x52\xb7\xfe\x39\xf3\xde\x06\xf8\xc6\x86\x56\xa1\x91\x4f\x04\x47\x15\xe9\x27\x52\x90\xa8\x6c\x37\x7c\x7f\x66\x62\x0a\xd9\x5a\x73\x1c\x13\xbe\x5c\x27\x64\x35\x8c\xe5\x19\x3c\x11\xde\x36\xcc\xdd\xcd\x7c\xde\xf7\x7d\x72\x34\x21\xb1\xee\x38\x6f\x9f\x25\xfc\xfc\x5d\x34\xf3\x65\x45\x99\x4e\x5d\x9c\x4e\x1c\x81\x84\xfa\x67\xd7\xd1\x37\xba\x6a\xa0\x8d\x67\xd9\xb6\x1e\xb2\x63\x74\xb2\x7a\x94\x47\x1a\xc3\xac\x8a\xf5\x3d\xc2\x21\x18\x0e\x37\x91\xef\x59\xdc\xa7\x59\x5e\xa6\x59\xbe\x2c\xfe\xfb\x22\xf0\xf6\xf1\xfa\x95\xfc\x39\xfe\xf9\xed\x78\x92\xba\x4d\x2a\x7b\x7a\x27\x44\xb1\xcb\xa3\xfc\x9b\x23\x31\x42\xa7\x24\x93\x38\x9f\x9d\x34\x47\x42\x92\x6e\xca\xcb\xe5\x05\xe2\xea\x08\x6f\x06\x9c\xcf\xc9\xe5\x22\xce\x67\x32\xea\x72\x11\xe2\x61\x5d\x7c\x5c\x64\x05\xe6\x4a\xb2\x14\xe9\x62\x81\xc4\x8d\x1d\x9a\x93\x61\x37\x74\x56\x1b\x4e\x7c\x83\xb9\xb3\x96\x5f\xd6\xc4\x32\x2f\x8b\xfd\x66\x9d\xe5\x25\x3e\x4d\x0e\xd2\x37\x93\x19\x26\xdf\x00\x4e\x3e\x8b\xdb\xfb\x05\x3e\x4d\x26\x9f\xc5\xdf\x01\x00\x00\xff\xff\xbb\xe9\x2b\x97\x1d\x04\x00\x00")

func assetsDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_assetsDockerfile,
		"assets/Dockerfile",
	)
}

func assetsDockerfile() (*asset, error) {
	bytes, err := assetsDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/Dockerfile", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsEntrypointSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x52\xc1\x6e\xe3\x36\x14\xbc\xf3\x2b\x66\x23\x1f\x76\x01\xaf\xb4\x6d\x0f\x05\x92\x26\xa8\x1a\xc4\x89\xdb\xd4\x31\x64\x19\x81\x11\xe4\x40\x8b\x4f\x16\x51\x99\x14\xc8\x47\x2b\xae\xe1\x7f\x2f\xa8\x38\x48\x0a\x14\xdd\x23\x1f\xde\xcc\x9b\xe1\x4c\xf2\x29\x5b\x6b\x93\xad\xa5\x6f\x44\x22\x12\x90\x61\xb7\xef\xac\x36\x9c\x9e\x26\xd7\xb6\xdb\x3b\xbd\x69\x18\x9f\xab\x2f\xf8\xf1\xdb\x0f\x3f\xe3\xf7\x60\x3a\xd2\xf8\x43\xf6\x72\x6b\xd9\x0e\x6b\x65\xa3\x3d\x6a\xdd\x12\xb4\x47\x27\x1d\xc3\xd6\x28\xac\x54\x9a\x90\xff\x1d\x1c\xa5\xc3\xda\xc7\x49\xdc\xac\x1d\x11\xbc\xad\xb9\x97\x8e\xce\xb1\xb7\x01\x95\x34\x70\xa4\xb4\x67\xa7\xd7\x81\x09\x9a\x21\x8d\xca\xac\xc3\xd6\x2a\x5d\xef\x45\x12\x47\xc1\x28\x72\xe0\x86\xc0\xe4\xb6\x3e\x9e\x8b\x8f\xdb\xd9\x12\xb7\x64\xc8\xc9\x16\xf3\xb0\x6e\x75\x85\x7b\x5d\x91\xf1\x04\xe9\xd1\xc5\x89\x6f\x48\x61\x1d\x69\x22\x60\x12\x15\x2c\x4e\x0a\x30\xb1\xc1\x28\xc9\xda\x9a\x31\x48\x73\x43\x0e\x3b\x72\x5e\x5b\x83\x9f\xde\x4e\x9c\xf8\xc6\xb0\x4e\x24\xf8\x2c\x39\xca\x76\xb0\x5d\x84\x7d\x81\x34\x7b\xb4\x92\xdf\x91\xff\xed\xfc\xdd\xa0\x82\x36\x03\x71\x63\x3b\x02\x37\x92\xa3\xbf\x5e\xb7\x2d\xd6\x84\xe0\xa9\x0e\xed\x58\x24\x58\x07\xc6\xe3\xb4\xbc\x7b\x58\x96\xc8\x67\x2b\x3c\xe6\x45\x91\xcf\xca\xd5\x05\x7a\xcd\x8d\x0d\x0c\xda\xd1\x2b\x93\xde\x76\xad\x26\x85\x5e\x3a\x27\x0d\xef\x61\x6b\x91\xe0\xcf\x9b\xe2\xfa\x2e\x9f\x95\xf9\x6f\xd3\xfb\x69\xb9\x82\x75\x98\x4c\xcb\xd9\xcd\x62\x81\xc9\x43\x81\x1c\xf3\xbc\x28\xa7\xd7\xcb\xfb\xbc\xc0\x7c\x59\xcc\x1f\x16\x37\x29\xb0\xa0\x28\x8a\x44\xf2\x7f\x7f\x5b\x0f\xe9\x38\x82\x22\x96\xba\xf5\xaf\x9e\x57\x36\xc0\x37\x36\xb4\x0a\x8d\xdc\x11\x1c\x55\xa4\x77\xa4\x20\x51\xd9\x6e\xff\xfd\xcc\x44\x02\xd9\x5a\xb3\x19\x1c\xfe\xbb\x4e\x98\xd6\x30\x96\xc7\xf0\x44\xf8\xa5\x61\xee\xce\xb3\xac\xef\xfb\x74\x63\x42\x6a\xdd\x26\x6b\x5f\x29\x7c\x76\x15\xc5\xbc\x55\x94\x69\xdb\xc5\x74\x62\x04\xd2\x7c\xe8\x7b\x14\x23\xa1\x6c\xf5\x17\x39\x54\xd6\xb0\xd4\x26\x16\xcc\x82\x5e\xa8\x8a\x3d\x74\xc1\xc0\x33\x75\x83\x39\x4f\x8c\xaf\x24\x74\x8d\xa7\x27\x8c\x12\x7c\xba\xc4\x37\x3c\x3f\x5f\x44\x43\x46\x60\x00\x61\xf4\xab\xa8\xb5\x10\x87\x83\x93\x66\x43\x18\x69\xa3\xe8\x65\x8c\x11\xb5\xb4\x25\xc3\x1e\xe7\x97\x48\x8b\x60\x8e\x47\x41\x55\x63\x71\x76\x38\xa4\xc7\xe3\x99\xf0\x0d\xbe\x56\xa7\x17\xae\x90\xf1\xb6\xcb\x3c\x2b\x1b\x78\x74\x18\x38\x8e\x29\xbf\xf0\x99\x38\x1c\xc8\xa8\xe3\x51\xfc\x13\x00\x00\xff\xff\x40\xbf\x1a\xcd\xc6\x03\x00\x00")

func assetsEntrypointShBytes() ([]byte, error) {
	return bindataRead(
		_assetsEntrypointSh,
		"assets/entrypoint.sh",
	)
}

func assetsEntrypointSh() (*asset, error) {
	bytes, err := assetsEntrypointShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/entrypoint.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsInitSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x52\x5d\x6f\xe4\x44\x10\x7c\xf7\xaf\x28\x6e\x79\x48\xa4\x78\xcd\x97\x40\x0a\x1f\x92\x89\x92\xbb\x85\xb0\x89\xf6\x43\xa7\x08\x10\x6a\x7b\xda\xeb\xd1\xcd\x4e\x5b\x33\x3d\x31\x46\xfc\x78\x34\xde\xbd\x3b\x90\x10\xdc\xdb\x4c\x4d\x77\x75\xd5\x74\x2d\x3e\xaa\x1a\xeb\xab\x86\x62\x5f\x2c\x8a\x05\xac\xb7\xba\x3c\x9f\x6f\x64\x98\x82\x3d\xf4\x8a\x8b\xf6\x12\x9f\x7d\xf2\xe9\x57\xf8\x21\xf9\x81\x2d\x7e\xa4\x91\x8e\xa2\x32\x97\xed\x7a\x1b\xd1\x59\xc7\xb0\x11\x03\x05\x85\x74\xd8\x08\x19\xcb\xa8\xff\x48\x81\x97\x73\xd9\xdf\x91\x5c\xd9\x05\x66\x44\xe9\x74\xa4\xc0\xd7\x98\x24\xa1\x25\x8f\xc0\xc6\x46\x0d\xb6\x49\xca\xb0\x0a\xf2\xa6\x92\x80\xa3\x18\xdb\x4d\x59\xa0\x22\x79\xc3\x01\xda\x33\x94\xc3\x31\xe6\x71\xf9\xf2\x72\xbd\xc7\x4b\xf6\x1c\xc8\xe1\x31\x35\xce\xb6\xb8\xb7\x2d\xfb\xc8\xa0\x88\x21\x23\xb1\x67\x83\x26\xd3\xe4\x86\xbb\xac\x60\x7b\x56\x80\x3b\x49\xde\x90\x5a\xf1\x57\x60\xab\x3d\x07\x3c\x73\x88\x56\x3c\x3e\x7f\x3b\xe2\xcc\x77\x05\x09\xc5\x02\x17\xa4\x59\x76\x80\x0c\xb9\xed\x12\xe4\x27\x38\xd2\xf7\x9d\xff\xee\xfc\xbd\x41\x03\xeb\x67\xe2\x5e\x06\x86\xf6\xa4\xd9\xdf\x68\x9d\x43\xc3\x48\x91\xbb\xe4\xae\x8a\x05\x9a\xa4\x78\xbd\xda\xbd\x7a\xd8\xef\x50\xaf\x9f\xf0\xba\xde\x6c\xea\xf5\xee\xe9\x6b\x8c\x56\x7b\x49\x0a\x7e\xe6\x13\x93\x3d\x0e\xce\xb2\xc1\x48\x21\x90\xd7\x09\xd2\x15\x0b\xfc\x74\xbb\xb9\x79\x55\xaf\x77\xf5\xf7\xab\xfb\xd5\xee\x09\x12\x70\xb7\xda\xad\x6f\xb7\x5b\xdc\x3d\x6c\x50\xe3\xb1\xde\xec\x56\x37\xfb\xfb\x7a\x83\xc7\xfd\xe6\xf1\x61\x7b\xbb\x04\xb6\x9c\x45\x71\xb1\xf8\xaf\xbf\xed\xe6\xed\x04\x86\x61\x25\xeb\xe2\xc9\xf3\x93\x24\xc4\x5e\x92\x33\xe8\xe9\x99\x11\xb8\x65\xfb\xcc\x06\x84\x56\x86\xe9\xff\x77\x56\x2c\x40\x4e\xfc\x61\x76\xf8\xcf\x38\x61\xd5\xc1\x8b\x5e\x21\x32\xe3\x9b\x5e\x75\xb8\xae\xaa\x71\x1c\x97\x07\x9f\x96\x12\x0e\x95\x3b\x51\xc4\xea\xbb\x2c\xe6\x6d\x44\x63\x1b\xec\xa0\xb0\x3e\x2a\x39\x17\x61\xa4\x7d\x93\x73\x24\x20\xec\x9b\xe4\x35\xc1\x8b\x99\xd3\x1a\x59\x51\x72\x51\xd0\xa0\xe5\x81\x15\x69\x30\xa4\xfc\xee\x7a\xa6\x40\x39\x21\x43\x1a\xc8\xc7\x41\x82\x96\x59\x4b\x44\x4b\x65\xcb\x41\x6d\x67\x5b\x52\x8e\x68\x53\x70\xef\x92\x5e\x0e\x41\x86\xfc\xca\xb1\x6c\xe5\x78\x14\x5f\xcc\xef\x65\x17\xb7\xf7\x98\x09\xae\xab\xca\xc8\xe8\x9d\x90\x59\x9e\x44\x2e\x5b\x39\x56\xce\xfa\xf4\x7b\x95\x66\xa5\xd5\x61\x38\xe0\xcf\x79\xfa\x1b\x9e\x40\xc6\xa0\x2c\x0a\x32\xa6\xcc\x50\xe0\x41\xa2\x55\x09\x13\x7e\x29\x80\x17\x86\x1b\xfc\x4c\xa1\xed\xbf\xa5\xa3\xf9\xf2\x8b\x5f\x3f\x78\xcc\xdc\xfe\xf1\x85\x8b\xcd\x6f\x81\x1d\x53\x64\x94\x6d\xbc\x9c\xe1\xa8\xd4\x38\x7e\xf1\x01\x7f\x74\x22\x2f\x5b\x2e\xfe\x0a\x00\x00\xff\xff\x24\xa7\x03\xff\x6e\x04\x00\x00")

func assetsInitShBytes() ([]byte, error) {
	return bindataRead(
		_assetsInitSh,
		"assets/init.sh",
	)
}

func assetsInitSh() (*asset, error) {
	bytes, err := assetsInitShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/init.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/Dockerfile": assetsDockerfile,
	"assets/entrypoint.sh": assetsEntrypointSh,
	"assets/init.sh": assetsInitSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"Dockerfile": &bintree{assetsDockerfile, map[string]*bintree{}},
		"entrypoint.sh": &bintree{assetsEntrypointSh, map[string]*bintree{}},
		"init.sh": &bintree{assetsInitSh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

