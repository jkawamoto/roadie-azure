// Code generated by go-bindata.
// sources:
// assets/Dockerfile
// assets/entrypoint.sh
// assets/init.sh
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsDockerfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x53\x5d\x8f\xdb\x36\x10\x7c\xe7\xaf\x18\xd8\x2f\x09\xe0\xc8\xfd\x78\x28\x70\x0d\x82\xaa\x67\x3b\x51\x73\x27\x1b\xb2\x8c\x83\x11\xe4\x81\x96\x56\x12\x7b\x34\x29\x90\xcb\x13\x5c\xc3\xff\xbd\xa0\xce\x69\x7a\x45\xda\xbe\x89\xa3\x9d\xe1\xcc\xee\x72\x2a\xa6\x58\xd8\xea\x91\x5c\xa3\x34\x89\x78\xbc\xb5\xfd\xc9\xa9\xb6\x63\xbc\xaa\x5e\xe3\x87\xef\xbe\xff\x09\xbf\x05\xd3\x93\xc2\x47\x39\xc8\xa3\x65\x3b\x96\x95\x9d\xf2\x88\x24\x28\x8f\x5e\x3a\x86\x6d\x50\x58\x59\x2b\x42\xfa\x47\x70\x94\x8c\x65\x7f\x47\x62\x65\xe3\x88\xe0\x6d\xc3\x83\x74\x74\x83\x93\x0d\xa8\xa4\x81\xa3\x5a\x79\x76\xea\x10\x98\xa0\x18\xd2\xd4\x73\xeb\x70\xb4\xb5\x6a\x4e\x62\x1a\xa1\x60\x6a\x72\xe0\x8e\xc0\xe4\x8e\x3e\x5e\x17\x0f\xef\xf3\x1d\xde\x93\x21\x27\x35\x36\xe1\xa0\x55\x85\x3b\x55\x91\xf1\x04\xe9\xd1\x47\xc4\x77\x54\xe3\x10\x65\x22\x61\x15\x1d\x6c\xaf\x0e\xb0\xb2\xc1\xd4\x92\x95\x35\x33\x90\xe2\x8e\x1c\x9e\xc8\x79\x65\x0d\x7e\xfc\x72\xc5\x55\x6f\x06\xeb\xc4\x14\xaf\x24\x47\xdb\x0e\xb6\x8f\xb4\xd7\x90\xe6\x04\x2d\xf9\x2b\xf3\xdb\xc9\xbf\x06\xac\xa1\xcc\x28\xdc\xd9\x9e\xc0\x9d\xe4\x98\x6f\x50\x5a\xe3\x40\x08\x9e\x9a\xa0\x67\x62\x8a\x43\x60\x3c\x64\xe5\x87\xf5\xae\x44\x9a\xef\xf1\x90\x16\x45\x9a\x97\xfb\x9f\x31\x28\xee\x6c\x60\xd0\x13\x3d\x2b\xa9\x63\xaf\x15\xd5\x18\xa4\x73\xd2\xf0\x09\xb6\x11\x53\xdc\x2f\x8b\xdb\x0f\x69\x5e\xa6\xbf\x66\x77\x59\xb9\x87\x75\x58\x65\x65\xbe\xdc\x6e\xb1\x5a\x17\x48\xb1\x49\x8b\x32\xbb\xdd\xdd\xa5\x05\x36\xbb\x62\xb3\xde\x2e\x13\x60\x4b\xd1\x14\x89\xe9\x7f\xf5\xb6\x19\xa7\xe3\x08\x35\xb1\x54\xda\x3f\x67\xde\xdb\x00\xdf\xd9\xa0\x6b\x74\xf2\x89\xe0\xa8\x22\xf5\x44\x35\x24\x2a\xdb\x9f\xfe\x7f\x66\x62\x0a\xa9\xad\x69\xc7\x84\x2f\xd7\x09\x59\x03\x63\x79\x06\x4f\x84\xb7\x1d\x73\x7f\x33\x9f\x0f\xc3\x90\xb4\x26\x24\xd6\xb5\x73\xfd\x2c\xe1\xe7\xef\xa2\x99\x2f\x2b\xca\x74\xec\xe3\x74\xe2\x08\x24\xea\xbf\x76\x1d\x43\xa7\xaa\x0e\xca\x78\x96\x5a\x7b\xc8\x9e\xd1\xcb\xea\x51\xb6\x34\x86\x59\x15\xeb\x7b\x84\x43\x30\x1c\x6e\x22\xdf\xb3\xb8\x4f\xb3\xbc\x4c\xb3\x7c\x59\xfc\xf3\x45\xe0\xed\xe3\xf5\x2b\xf9\x7d\xfc\xf3\x4b\x7b\x94\x4a\x27\x95\x3d\xbe\x13\xa2\xd8\xe5\x51\xfe\x4d\x4b\x8c\xd0\xd7\x92\xe9\x05\x74\xb5\x80\x37\xa7\x11\x0a\xac\xb4\x47\xab\x18\xe2\x7c\x76\xd2\xb4\x84\x24\xdd\x94\x97\xcb\xbf\x91\xce\xe7\xe4\x72\x11\xe7\x33\x99\xfa\x72\x11\xe2\x61\x5d\x7c\x5c\x64\x05\xe6\xb5\x64\x29\xd2\xc5\x02\x89\x1b\xfb\x38\x27\xc3\xee\xd4\x5b\x65\x38\xf1\x1d\xe6\xce\x5a\x7e\x89\x89\x65\x5e\x16\xfb\xcd\x3a\xcb\x4b\x7c\x9a\x1c\xa4\xef\x26\x33\x4c\xbe\x51\x38\xf9\x2c\x6e\xef\x17\xf8\x34\x99\x7c\x16\x7f\x06\x00\x00\xff\xff\xb7\x9a\x4c\xac\x43\x04\x00\x00")

func assetsDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_assetsDockerfile,
		"assets/Dockerfile",
	)
}

func assetsDockerfile() (*asset, error) {
	bytes, err := assetsDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/Dockerfile", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsEntrypointSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x52\xc1\x6e\xe3\x36\x14\xbc\xf3\x2b\x66\x57\x3e\xec\x02\xae\xb4\x6d\x0f\x05\xb2\xdd\xa0\x6a\x10\x27\x6e\x53\xc7\x90\x65\x04\x46\x90\x03\x2d\x3e\x59\x44\x65\x52\x20\x1f\xad\xb8\x82\xfe\xbd\xa0\x9d\x20\x29\x50\xb4\x47\x3e\xcc\x9b\x37\xc3\x99\xe4\x43\xb6\xd5\x26\xdb\x4a\xdf\x88\x44\x24\x20\xc3\xee\xd8\x59\x6d\x38\x7d\x99\x5c\xd9\xee\xe8\xf4\xae\x61\x7c\xaa\x3e\xe3\x87\x2f\xdf\xff\x84\xdf\x82\xe9\x48\xe3\x77\xd9\xcb\xbd\x65\x7b\x82\x95\x8d\xf6\xa8\x75\x4b\xd0\x1e\x9d\x74\x0c\x5b\xa3\xb0\x52\x69\x42\xfe\x57\x70\x94\x9e\x60\xef\x27\x11\x59\x3b\x22\x78\x5b\x73\x2f\x1d\x5d\xe0\x68\x03\x2a\x69\xe0\x48\x69\xcf\x4e\x6f\x03\x13\x34\x43\x1a\x95\x59\x87\xbd\x55\xba\x3e\x8a\x24\x8e\x82\x51\xe4\xc0\x0d\x81\xc9\xed\x7d\x3c\x17\x1f\x37\x8b\x35\x6e\xc8\x90\x93\x2d\x96\x61\xdb\xea\x0a\x77\xba\x22\xe3\x09\xd2\xa3\x8b\x13\xdf\x90\xc2\x36\xd2\xc4\x85\x59\x54\xb0\x7a\x51\x80\x99\x0d\x46\x49\xd6\xd6\x4c\x41\x9a\x1b\x72\x38\x90\xf3\xda\x1a\xfc\xf8\x7a\xe2\x85\x6f\x0a\xeb\x44\x82\x4f\x92\xa3\x6c\x07\xdb\xc5\xb5\xcf\x90\xe6\x88\x56\xf2\xdb\xe6\xbf\x3b\x7f\x33\xa8\xa0\xcd\x89\xb8\xb1\x1d\x81\x1b\xc9\xd1\x5f\xaf\xdb\x16\x5b\x42\xf0\x54\x87\x76\x2a\x12\x6c\x03\xe3\x61\x5e\xde\xde\xaf\x4b\xe4\x8b\x0d\x1e\xf2\xa2\xc8\x17\xe5\xe6\x2b\x7a\xcd\x8d\x0d\x0c\x3a\xd0\x99\x49\xef\xbb\x56\x93\x42\x2f\x9d\x93\x86\x8f\xb0\xb5\x48\xf0\xc7\x75\x71\x75\x9b\x2f\xca\xfc\xd7\xf9\xdd\xbc\xdc\xc0\x3a\xcc\xe6\xe5\xe2\x7a\xb5\xc2\xec\xbe\x40\x8e\x65\x5e\x94\xf3\xab\xf5\x5d\x5e\x60\xb9\x2e\x96\xf7\xab\xeb\x14\x58\x51\x14\x45\x22\xf9\xaf\xbf\xad\x4f\xe9\x38\x82\x22\x96\xba\xf5\x67\xcf\x1b\x1b\xe0\x1b\x1b\x5a\x85\x46\x1e\x08\x8e\x2a\xd2\x07\x52\x90\xa8\x6c\x77\xfc\xff\xcc\x44\x02\xd9\x5a\xb3\x3b\x39\xfc\x67\x9d\x30\xaf\x61\x2c\x4f\xe1\x89\xf0\x73\xc3\xdc\x5d\x64\x59\xdf\xf7\xe9\xce\x84\xd4\xba\x5d\xd6\x9e\x29\x7c\x76\x19\xc5\xbc\x56\x94\x69\xdf\xc5\x74\x62\x04\xd2\xbc\xeb\x7b\x14\x23\xa1\x6c\xf5\x27\x39\x54\xd6\xb0\xd4\x26\x16\xcc\x82\x9e\xa9\x8a\x3d\x74\xc1\xc0\x33\x75\x27\x73\xba\xc6\xe3\x23\x26\x09\x3e\x7c\xc3\x17\x3c\x3d\x7d\x8d\x4e\x8c\xc0\x09\x8d\xc9\x2f\xa2\xd6\x42\x0c\x83\x93\x66\x47\x98\x68\xa3\xe8\x79\x8a\x09\xb5\xb4\x27\xc3\x1e\x17\xdf\x90\x16\xc1\x8c\xa3\xa0\xaa\xb1\xf8\x38\x0c\xe9\x38\x7e\x14\xbe\xc1\x77\xd5\xeb\x0b\x97\xc8\x78\xdf\x65\x9e\x95\x0d\x3c\x0c\x67\x96\x71\x4c\xf9\x99\xc5\x30\x90\x51\xe3\x28\xfe\x0e\x00\x00\xff\xff\x17\x54\x22\x3b\xc1\x03\x00\x00")

func assetsEntrypointShBytes() ([]byte, error) {
	return bindataRead(
		_assetsEntrypointSh,
		"assets/entrypoint.sh",
	)
}

func assetsEntrypointSh() (*asset, error) {
	bytes, err := assetsEntrypointShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/entrypoint.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsInitSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x52\x5d\x6f\xe4\x44\x10\x7c\xf7\xaf\x28\x6e\x79\x48\xa4\x78\xcd\x97\x40\x0a\x1f\x92\x89\x92\xbb\x85\xb0\x89\xf6\x43\xa7\x08\x10\x6a\x7b\xda\xeb\xd1\xcd\x4e\x5b\x33\x3d\x31\x46\xfc\x78\x34\xde\xbd\x3b\x90\x10\xdc\xdb\x4c\x4d\x77\x75\xd5\x74\x2d\x3e\xaa\x1a\xeb\xab\x86\x62\x5f\x2c\x8a\x05\xac\xb7\xba\x3c\x9f\x6f\x64\x98\x82\x3d\xf4\x8a\x8b\xf6\x12\x9f\x7d\xf2\xe9\x57\xf8\x21\xf9\x81\x2d\x7e\xa4\x91\x8e\xa2\x32\x97\xed\x7a\x1b\xd1\x59\xc7\xb0\x11\x03\x05\x85\x74\xd8\x08\x19\xcb\xa8\xff\x48\x81\x97\x73\xd9\xdf\x91\x5c\xd9\x05\x66\x44\xe9\x74\xa4\xc0\xd7\x98\x24\xa1\x25\x8f\xc0\xc6\x46\x0d\xb6\x49\xca\xb0\x0a\xf2\xa6\x92\x80\xa3\x18\xdb\x4d\x59\xa0\x22\x79\xc3\x01\xda\x33\x94\xc3\x31\xe6\x71\xf9\xf2\x72\xbd\xc7\x4b\xf6\x1c\xc8\xe1\x31\x35\xce\xb6\xb8\xb7\x2d\xfb\xc8\xa0\x88\x21\x23\xb1\x67\x83\x26\xd3\xe4\x86\xbb\xac\x60\x7b\x56\x80\x3b\x49\xde\x90\x5a\xf1\x57\x60\xab\x3d\x07\x3c\x73\x88\x56\x3c\x3e\x7f\x3b\xe2\xcc\x77\x05\x09\xc5\x02\x17\xa4\x59\x76\x80\x0c\xb9\xed\x12\xe4\x27\x38\xd2\xf7\x9d\xff\xee\xfc\xbd\x41\x03\xeb\x67\xe2\x5e\x06\x86\xf6\xa4\xd9\xdf\x68\x9d\x43\xc3\x48\x91\xbb\xe4\xae\x8a\x05\x9a\xa4\x78\xbd\xda\xbd\x7a\xd8\xef\x50\xaf\x9f\xf0\xba\xde\x6c\xea\xf5\xee\xe9\x6b\x8c\x56\x7b\x49\x0a\x7e\xe6\x13\x93\x3d\x0e\xce\xb2\xc1\x48\x21\x90\xd7\x09\xd2\x15\x0b\xfc\x74\xbb\xb9\x79\x55\xaf\x77\xf5\xf7\xab\xfb\xd5\xee\x09\x12\x70\xb7\xda\xad\x6f\xb7\x5b\xdc\x3d\x6c\x50\xe3\xb1\xde\xec\x56\x37\xfb\xfb\x7a\x83\xc7\xfd\xe6\xf1\x61\x7b\xbb\x04\xb6\x9c\x45\x71\xb1\xf8\xaf\xbf\xed\xe6\xed\x04\x86\x61\x25\xeb\xe2\xc9\xf3\x93\x24\xc4\x5e\x92\x33\xe8\xe9\x99\x11\xb8\x65\xfb\xcc\x06\x84\x56\x86\xe9\xff\x77\x56\x2c\x40\x4e\xfc\x61\x76\xf8\xcf\x38\x61\xd5\xc1\x8b\x5e\x21\x32\xe3\x9b\x5e\x75\xb8\xae\xaa\x71\x1c\x97\x07\x9f\x96\x12\x0e\x95\x3b\x51\xc4\xea\xbb\x2c\xe6\x6d\x44\x63\x1b\xec\xa0\xb0\x3e\x2a\x39\x17\x61\xa4\x7d\x93\x73\x24\x20\xec\x9b\xe4\x35\xc1\x8b\x99\xd3\x1a\x59\x51\x72\x51\xd0\xa0\xe5\x81\x15\x69\x30\xa4\xfc\xee\x7a\xa6\x40\x39\x21\x43\x1a\xc8\xc7\x41\x82\x96\x59\x4b\x44\x4b\x65\xcb\x41\x6d\x67\x5b\x52\x8e\x68\x53\x70\xef\x92\x5e\x0e\x41\x86\xfc\xca\xb1\x6c\xe5\x78\x14\x5f\xcc\xef\x65\x17\xb7\xf7\x98\x09\xae\xab\xca\xc8\xe8\x9d\x90\x59\x9e\x44\x2e\x5b\x39\x56\xce\xfa\xf4\x7b\x95\x66\xa5\xd5\x61\x38\xe0\xcf\x79\xfa\x1b\x9e\x40\xc6\xa0\x2c\x0a\x32\xa6\xcc\x50\xe0\x41\xa2\x55\x09\x13\x7e\x29\x80\x17\x86\x1b\xfc\x4c\xa1\xed\xbf\xa5\xa3\xf9\xf2\x8b\x5f\x3f\x78\xcc\xdc\xfe\xf1\x85\x8b\xcd\x6f\x81\x1d\x53\x64\x94\x6d\xbc\x9c\xe1\xa8\xd4\x38\x7e\xf1\x01\x7f\x74\x22\x2f\x5b\x2e\xfe\x0a\x00\x00\xff\xff\x24\xa7\x03\xff\x6e\x04\x00\x00")

func assetsInitShBytes() ([]byte, error) {
	return bindataRead(
		_assetsInitSh,
		"assets/init.sh",
	)
}

func assetsInitSh() (*asset, error) {
	bytes, err := assetsInitShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/init.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/Dockerfile": assetsDockerfile,
	"assets/entrypoint.sh": assetsEntrypointSh,
	"assets/init.sh": assetsInitSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"Dockerfile": &bintree{assetsDockerfile, map[string]*bintree{}},
		"entrypoint.sh": &bintree{assetsEntrypointSh, map[string]*bintree{}},
		"init.sh": &bintree{assetsInitSh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

