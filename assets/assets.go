// Code generated by go-bindata.
// sources:
// assets/Dockerfile
// assets/entrypoint.sh
// assets/init.sh
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsDockerfile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x53\x4d\x8f\xdb\x36\x14\xbc\xf3\x57\x0c\xec\x4b\x02\x38\x72\x3f\x0e\x05\xb6\x41\x50\x75\x6d\x27\x6a\x76\x65\x43\x96\xb1\x30\x82\x1c\x68\xf1\x49\x62\x57\x26\x05\xf2\x71\x05\xd7\xf0\x7f\x2f\xa8\x75\x9a\x6e\x91\xb6\x37\x73\x3c\x33\x9c\xe1\x7b\x9a\x8a\x29\x16\xb6\x7a\x24\x57\xeb\x8e\x44\x3c\xde\xda\xfe\xe4\x74\xd3\x32\x5e\x55\xaf\xf1\xc3\x77\xdf\xff\x84\xdf\x82\xe9\x49\xe3\xa3\x1c\xe4\xd1\xb2\x1d\x69\x65\xab\x3d\xa2\x08\xda\xa3\x97\x8e\x61\x6b\x14\x56\x2a\x4d\x48\xff\x08\x8e\x92\x91\xf6\x77\x24\x32\x6b\x47\x04\x6f\x6b\x1e\xa4\xa3\x1b\x9c\x6c\x40\x25\x0d\x1c\x29\xed\xd9\xe9\x43\x60\x82\x66\x48\xa3\xe6\xd6\xe1\x68\x95\xae\x4f\x62\x1a\xa1\x60\x14\x39\x70\x4b\x60\x72\x47\x1f\xaf\x8b\x87\xf7\xf9\x0e\xef\xc9\x90\x93\x1d\x36\xe1\xd0\xe9\x0a\x77\xba\x22\xe3\x09\xd2\xa3\x8f\x88\x6f\x49\xe1\x10\x6d\xa2\x60\x15\x13\x6c\xaf\x09\xb0\xb2\xc1\x28\xc9\xda\x9a\x19\x48\x73\x4b\x0e\x4f\xe4\xbc\xb6\x06\x3f\x7e\xb9\xe2\xea\x37\x83\x75\x62\x8a\x57\x92\x63\x6c\x07\xdb\x47\xd9\x6b\x48\x73\x42\x27\xf9\xab\xf2\xdb\xcd\xbf\x16\x54\xd0\x66\x34\x6e\x6d\x4f\xe0\x56\x72\xec\x37\xe8\xae\xc3\x81\x10\x3c\xd5\xa1\x9b\x89\x29\x0e\x81\xf1\x90\x95\x1f\xd6\xbb\x12\x69\xbe\xc7\x43\x5a\x14\x69\x5e\xee\x7f\xc6\xa0\xb9\xb5\x81\x41\x4f\xf4\xec\xa4\x8f\x7d\xa7\x49\x61\x90\xce\x49\xc3\x27\xd8\x5a\x4c\x71\xbf\x2c\x6e\x3f\xa4\x79\x99\xfe\x9a\xdd\x65\xe5\x1e\xd6\x61\x95\x95\xf9\x72\xbb\xc5\x6a\x5d\x20\xc5\x26\x2d\xca\xec\x76\x77\x97\x16\xd8\xec\x8a\xcd\x7a\xbb\x4c\x80\x2d\xc5\x50\x24\xa6\xff\xf5\xb6\xf5\x38\x1d\x47\x50\xc4\x52\x77\xfe\xb9\xf3\xde\x06\xf8\xd6\x86\x4e\xa1\x95\x4f\x04\x47\x15\xe9\x27\x52\x90\xa8\x6c\x7f\xfa\xff\x99\x89\x29\x64\x67\x4d\x33\x36\x7c\xb9\x4e\xc8\x6a\x18\xcb\x33\x78\x22\xbc\x6d\x99\xfb\x9b\xf9\x7c\x18\x86\xa4\x31\x21\xb1\xae\x99\x77\xcf\x16\x7e\xfe\x2e\x86\xf9\xb2\xa2\x4c\xc7\x3e\x4e\x27\x8e\x40\x42\xfd\xb5\xeb\x18\x5a\x5d\xb5\xd0\xc6\xb3\xec\x3a\x0f\xd9\x33\x7a\x59\x3d\xca\x86\xc6\x32\xab\x62\x7d\x8f\x70\x08\x86\xc3\x4d\xd4\x7b\x16\xf7\x69\x96\x97\x69\x96\x2f\x8b\x7f\x7e\x11\x78\xfb\x78\xfd\x95\xfc\x3e\xfe\xf3\x4b\x73\x94\xba\x4b\x2a\x7b\x7c\x27\x44\xb1\xcb\xa3\xfd\x9b\x86\x18\xa1\x57\x92\xe9\x05\x74\x8d\x80\x37\x27\x34\x9a\xc5\xf9\xec\xa4\x69\x08\x49\xba\x29\x2f\x97\x7f\x63\x9e\xcf\xc9\xe5\x22\xce\x67\x32\xea\x72\x11\xe2\x61\x5d\x7c\x5c\x64\x05\xe6\x4a\xb2\x14\xe9\x62\x81\xc4\x8d\x8f\x37\x27\xc3\xee\xd4\x5b\x6d\x38\xf1\x2d\xe6\xce\x5a\x7e\x89\x89\x65\x5e\x16\xfb\xcd\x3a\xcb\x4b\x7c\x9a\x1c\xa4\x6f\x27\x33\x4c\xbe\x41\x9c\x7c\x16\xb7\xf7\x0b\x7c\x9a\x4c\x3e\x8b\x3f\x03\x00\x00\xff\xff\xdb\x11\x68\x75\x38\x04\x00\x00")

func assetsDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_assetsDockerfile,
		"assets/Dockerfile",
	)
}

func assetsDockerfile() (*asset, error) {
	bytes, err := assetsDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/Dockerfile", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsEntrypointSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x52\xc1\x6e\xe3\x36\x14\xbc\xf3\x2b\x66\x57\x3e\xec\x02\xae\xb4\x6d\x0f\x05\xb2\xdd\xa0\x6a\x10\x27\x6e\x53\xc7\x90\x65\x04\x46\x90\x03\x2d\x3e\x59\x44\x65\x52\x20\x1f\xad\xb8\x82\xfe\xbd\xa0\x9d\x20\x29\x50\xb4\x47\x3e\xcc\x9b\x37\xc3\x99\xe4\x43\xb6\xd5\x26\xdb\x4a\xdf\x88\x44\x24\x20\xc3\xee\xd8\x59\x6d\x38\x7d\x99\x5c\xd9\xee\xe8\xf4\xae\x61\x7c\xaa\x3e\xe3\x87\x2f\xdf\xff\x84\xdf\x82\xe9\x48\xe3\x77\xd9\xcb\xbd\x65\x7b\x82\x95\x8d\xf6\xa8\x75\x4b\xd0\x1e\x9d\x74\x0c\x5b\xa3\xb0\x52\x69\x42\xfe\x57\x70\x94\x9e\x60\xef\x27\x11\x59\x3b\x22\x78\x5b\x73\x2f\x1d\x5d\xe0\x68\x03\x2a\x69\xe0\x48\x69\xcf\x4e\x6f\x03\x13\x34\x43\x1a\x95\x59\x87\xbd\x55\xba\x3e\x8a\x24\x8e\x82\x51\xe4\xc0\x0d\x81\xc9\xed\x7d\x3c\x17\x1f\x37\x8b\x35\x6e\xc8\x90\x93\x2d\x96\x61\xdb\xea\x0a\x77\xba\x22\xe3\x09\xd2\xa3\x8b\x13\xdf\x90\xc2\x36\xd2\xc4\x85\x59\x54\xb0\x7a\x51\x80\x99\x0d\x46\x49\xd6\xd6\x4c\x41\x9a\x1b\x72\x38\x90\xf3\xda\x1a\xfc\xf8\x7a\xe2\x85\x6f\x0a\xeb\x44\x82\x4f\x92\xa3\x6c\x07\xdb\xc5\xb5\xcf\x90\xe6\x88\x56\xf2\xdb\xe6\xbf\x3b\x7f\x33\xa8\xa0\xcd\x89\xb8\xb1\x1d\x81\x1b\xc9\xd1\x5f\xaf\xdb\x16\x5b\x42\xf0\x54\x87\x76\x2a\x12\x6c\x03\xe3\x61\x5e\xde\xde\xaf\x4b\xe4\x8b\x0d\x1e\xf2\xa2\xc8\x17\xe5\xe6\x2b\x7a\xcd\x8d\x0d\x0c\x3a\xd0\x99\x49\xef\xbb\x56\x93\x42\x2f\x9d\x93\x86\x8f\xb0\xb5\x48\xf0\xc7\x75\x71\x75\x9b\x2f\xca\xfc\xd7\xf9\xdd\xbc\xdc\xc0\x3a\xcc\xe6\xe5\xe2\x7a\xb5\xc2\xec\xbe\x40\x8e\x65\x5e\x94\xf3\xab\xf5\x5d\x5e\x60\xb9\x2e\x96\xf7\xab\xeb\x14\x58\x51\x14\x45\x22\xf9\xaf\xbf\xad\x4f\xe9\x38\x82\x22\x96\xba\xf5\x67\xcf\x1b\x1b\xe0\x1b\x1b\x5a\x85\x46\x1e\x08\x8e\x2a\xd2\x07\x52\x90\xa8\x6c\x77\xfc\xff\xcc\x44\x02\xd9\x5a\xb3\x3b\x39\xfc\x67\x9d\x30\xaf\x61\x2c\x4f\xe1\x89\xf0\x73\xc3\xdc\x5d\x64\x59\xdf\xf7\xe9\xce\x84\xd4\xba\x5d\xd6\x9e\x29\x7c\x76\x19\xc5\xbc\x56\x94\x69\xdf\xc5\x74\x62\x04\xd2\xbc\xeb\x7b\x14\x23\xa1\x6c\xf5\x27\x39\x54\xd6\xb0\xd4\x26\x16\xcc\x82\x9e\xa9\x8a\x3d\x74\xc1\xc0\x33\x75\x27\x73\xba\xc6\xe3\x23\x26\x09\x3e\x7c\xc3\x17\x3c\x3d\x7d\x8d\x4e\x8c\xc0\x09\x8d\xc9\x2f\xa2\xd6\x42\x0c\x83\x93\x66\x47\x98\x68\xa3\xe8\x79\x8a\x09\xb5\xb4\x27\xc3\x1e\x17\xdf\x90\x16\xc1\x8c\xa3\xa0\xaa\xb1\xf8\x38\x0c\xe9\x38\x7e\x14\xbe\xc1\x77\xd5\xeb\x0b\x97\xc8\x78\xdf\x65\x9e\x95\x0d\x3c\x0c\x67\x96\x71\x4c\xf9\x99\xc5\x30\x90\x51\xe3\x28\xfe\x0e\x00\x00\xff\xff\x17\x54\x22\x3b\xc1\x03\x00\x00")

func assetsEntrypointShBytes() ([]byte, error) {
	return bindataRead(
		_assetsEntrypointSh,
		"assets/entrypoint.sh",
	)
}

func assetsEntrypointSh() (*asset, error) {
	bytes, err := assetsEntrypointShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/entrypoint.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsInitSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x52\x5d\x6f\xe4\x44\x10\x7c\xf7\xaf\x28\x6e\x79\x48\xa4\x78\xcd\x97\x40\x0a\x1f\x92\x89\x92\xbb\x85\xb0\x89\xf6\x43\xa7\x08\x10\x6a\x7b\xda\xeb\xd1\xcd\x4e\x5b\x33\x3d\x31\x46\xfc\x78\x34\xde\xbd\x3b\x90\x10\xdc\xdb\x4c\x4d\x77\x75\xd5\x74\x2d\x3e\xaa\x1a\xeb\xab\x86\x62\x5f\x2c\x8a\x05\xac\xb7\xba\x3c\x9f\x6f\x64\x98\x82\x3d\xf4\x8a\x8b\xf6\x12\x9f\x7d\xf2\xe9\x57\xf8\x21\xf9\x81\x2d\x7e\xa4\x91\x8e\xa2\x32\x97\xed\x7a\x1b\xd1\x59\xc7\xb0\x11\x03\x05\x85\x74\xd8\x08\x19\xcb\xa8\xff\x48\x81\x97\x73\xd9\xdf\x91\x5c\xd9\x05\x66\x44\xe9\x74\xa4\xc0\xd7\x98\x24\xa1\x25\x8f\xc0\xc6\x46\x0d\xb6\x49\xca\xb0\x0a\xf2\xa6\x92\x80\xa3\x18\xdb\x4d\x59\xa0\x22\x79\xc3\x01\xda\x33\x94\xc3\x31\xe6\x71\xf9\xf2\x72\xbd\xc7\x4b\xf6\x1c\xc8\xe1\x31\x35\xce\xb6\xb8\xb7\x2d\xfb\xc8\xa0\x88\x21\x23\xb1\x67\x83\x26\xd3\xe4\x86\xbb\xac\x60\x7b\x56\x80\x3b\x49\xde\x90\x5a\xf1\x57\x60\xab\x3d\x07\x3c\x73\x88\x56\x3c\x3e\x7f\x3b\xe2\xcc\x77\x05\x09\xc5\x02\x17\xa4\x59\x76\x80\x0c\xb9\xed\x12\xe4\x27\x38\xd2\xf7\x9d\xff\xee\xfc\xbd\x41\x03\xeb\x67\xe2\x5e\x06\x86\xf6\xa4\xd9\xdf\x68\x9d\x43\xc3\x48\x91\xbb\xe4\xae\x8a\x05\x9a\xa4\x78\xbd\xda\xbd\x7a\xd8\xef\x50\xaf\x9f\xf0\xba\xde\x6c\xea\xf5\xee\xe9\x6b\x8c\x56\x7b\x49\x0a\x7e\xe6\x13\x93\x3d\x0e\xce\xb2\xc1\x48\x21\x90\xd7\x09\xd2\x15\x0b\xfc\x74\xbb\xb9\x79\x55\xaf\x77\xf5\xf7\xab\xfb\xd5\xee\x09\x12\x70\xb7\xda\xad\x6f\xb7\x5b\xdc\x3d\x6c\x50\xe3\xb1\xde\xec\x56\x37\xfb\xfb\x7a\x83\xc7\xfd\xe6\xf1\x61\x7b\xbb\x04\xb6\x9c\x45\x71\xb1\xf8\xaf\xbf\xed\xe6\xed\x04\x86\x61\x25\xeb\xe2\xc9\xf3\x93\x24\xc4\x5e\x92\x33\xe8\xe9\x99\x11\xb8\x65\xfb\xcc\x06\x84\x56\x86\xe9\xff\x77\x56\x2c\x40\x4e\xfc\x61\x76\xf8\xcf\x38\x61\xd5\xc1\x8b\x5e\x21\x32\xe3\x9b\x5e\x75\xb8\xae\xaa\x71\x1c\x97\x07\x9f\x96\x12\x0e\x95\x3b\x51\xc4\xea\xbb\x2c\xe6\x6d\x44\x63\x1b\xec\xa0\xb0\x3e\x2a\x39\x17\x61\xa4\x7d\x93\x73\x24\x20\xec\x9b\xe4\x35\xc1\x8b\x99\xd3\x1a\x59\x51\x72\x51\xd0\xa0\xe5\x81\x15\x69\x30\xa4\xfc\xee\x7a\xa6\x40\x39\x21\x43\x1a\xc8\xc7\x41\x82\x96\x59\x4b\x44\x4b\x65\xcb\x41\x6d\x67\x5b\x52\x8e\x68\x53\x70\xef\x92\x5e\x0e\x41\x86\xfc\xca\xb1\x6c\xe5\x78\x14\x5f\xcc\xef\x65\x17\xb7\xf7\x98\x09\xae\xab\xca\xc8\xe8\x9d\x90\x59\x9e\x44\x2e\x5b\x39\x56\xce\xfa\xf4\x7b\x95\x66\xa5\xd5\x61\x38\xe0\xcf\x79\xfa\x1b\x9e\x40\xc6\xa0\x2c\x0a\x32\xa6\xcc\x50\xe0\x41\xa2\x55\x09\x13\x7e\x29\x80\x17\x86\x1b\xfc\x4c\xa1\xed\xbf\xa5\xa3\xf9\xf2\x8b\x5f\x3f\x78\xcc\xdc\xfe\xf1\x85\x8b\xcd\x6f\x81\x1d\x53\x64\x94\x6d\xbc\x9c\xe1\xa8\xd4\x38\x7e\xf1\x01\x7f\x74\x22\x2f\x5b\x2e\xfe\x0a\x00\x00\xff\xff\x24\xa7\x03\xff\x6e\x04\x00\x00")

func assetsInitShBytes() ([]byte, error) {
	return bindataRead(
		_assetsInitSh,
		"assets/init.sh",
	)
}

func assetsInitSh() (*asset, error) {
	bytes, err := assetsInitShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/init.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/Dockerfile": assetsDockerfile,
	"assets/entrypoint.sh": assetsEntrypointSh,
	"assets/init.sh": assetsInitSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"Dockerfile": &bintree{assetsDockerfile, map[string]*bintree{}},
		"entrypoint.sh": &bintree{assetsEntrypointSh, map[string]*bintree{}},
		"init.sh": &bintree{assetsInitSh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

