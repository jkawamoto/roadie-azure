// Code generated by go-bindata.
// sources:
// assets/Dockerfile
// assets/entrypoint.sh
// assets/init.sh
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsDockerfile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x53\xd1\x8e\xdb\x36\x10\x7c\xe7\x57\x0c\xec\x97\x04\x70\xe4\x4b\xfb\x50\x20\x0d\x82\x2a\x67\x39\x51\x73\x96\x0d\x59\xee\xc1\x08\x82\x82\x96\x56\x12\x7b\x32\x29\x90\x2b\x0b\xae\xa1\x7f\x2f\xa8\x73\x9a\x5e\x71\x6d\xde\xb4\xa3\x9d\xe1\x0c\x77\x39\x15\x53\x2c\x4c\xfe\x40\xb6\x54\x0d\x09\x5f\xde\x9a\xf6\x6c\x55\x55\x33\x5e\xe4\x2f\xf1\xc3\xcd\xeb\x9f\xf0\x6b\xa7\x5b\x52\xf8\x24\x7b\x79\x34\x6c\xc6\xb6\xac\x56\x0e\x9e\x04\xe5\xd0\x4a\xcb\x30\x25\x52\x23\x0b\x45\x08\xff\xec\x2c\x05\x63\xdb\x3f\x11\xdf\x59\x5a\x22\x38\x53\x72\x2f\x2d\xbd\xc1\xd9\x74\xc8\xa5\x86\xa5\x42\x39\xb6\xea\xd0\x31\x41\x31\xa4\x2e\xe6\xc6\xe2\x68\x0a\x55\x9e\xc5\xd4\x43\x9d\x2e\xc8\x82\x6b\x02\x93\x3d\x3a\x7f\x9c\x2f\x3e\x24\x3b\x7c\x20\x4d\x56\x36\xd8\x74\x87\x46\xe5\xb8\x53\x39\x69\x47\x90\x0e\xad\x47\x5c\x4d\x05\x0e\x5e\xc6\x13\x96\xde\xc1\xf6\xea\x00\x4b\xd3\xe9\x42\xb2\x32\x7a\x06\x52\x5c\x93\xc5\x89\xac\x53\x46\xe3\xc7\xaf\x47\x5c\xf5\x66\x30\x56\x4c\xf1\x42\xb2\xb7\x6d\x61\x5a\x4f\x7b\x09\xa9\xcf\x68\x24\x7f\x63\x3e\x9f\xfc\x5b\xc0\x02\x4a\x8f\xc2\xb5\x69\x09\x5c\x4b\xf6\xf9\x7a\xd5\x34\x38\x10\x3a\x47\x65\xd7\xcc\xc4\x14\x87\x8e\x71\x1f\x67\x1f\xd7\xbb\x0c\x61\xb2\xc7\x7d\x98\xa6\x61\x92\xed\x7f\x46\xaf\xb8\x36\x1d\x83\x4e\xf4\xa8\xa4\x8e\x6d\xa3\xa8\x40\x2f\xad\x95\x9a\xcf\x30\xa5\x98\x62\x15\xa5\xb7\x1f\xc3\x24\x0b\xdf\xc7\x77\x71\xb6\x87\xb1\x58\xc6\x59\x12\x6d\xb7\x58\xae\x53\x84\xd8\x84\x69\x16\xdf\xee\xee\xc2\x14\x9b\x5d\xba\x59\x6f\xa3\x00\xd8\x92\x37\x45\x62\xfa\x7f\x77\x5b\x8e\xd3\xb1\x84\x82\x58\xaa\xc6\x3d\x66\xde\x9b\x0e\xae\x36\x5d\x53\xa0\x96\x27\x82\xa5\x9c\xd4\x89\x0a\x48\xe4\xa6\x3d\x7f\x7f\x66\x62\x0a\xd9\x18\x5d\x8d\x09\x9f\xae\x13\xe2\x12\xda\xf0\x0c\x8e\x08\x6f\x6b\xe6\xf6\xcd\x7c\xde\xf7\x7d\x50\xe9\x2e\x30\xb6\x9a\x37\x8f\x12\x6e\xfe\xce\x9b\xf9\xba\xa2\x4c\xc7\xd6\x4f\xc7\x8f\x40\xa2\xf8\x7b\xd7\xd1\xd7\x2a\xaf\xa1\xb4\x63\xd9\x34\x0e\xb2\x65\xb4\x32\x7f\x90\x15\x8d\x61\x96\xe9\x7a\x85\xcb\x25\x88\x8f\xb2\xa2\x61\x10\xab\x30\x4e\xb2\x30\x4e\xa2\xf4\xdf\xcf\x01\x6f\x1f\xae\x5f\xc1\x1f\xe3\x9f\x5f\xaa\xa3\x54\x4d\x90\x9b\xe3\x3b\x21\xa2\xe4\x37\x64\x51\xba\xc2\x89\x5f\xdf\xdc\x8c\xe5\x22\x7a\x1f\x87\xc9\xef\xcb\x74\x9d\x64\x51\xb2\x80\x36\x5a\x69\x26\x2b\x73\x56\x27\x12\x22\xdd\x25\xde\xce\xab\x8a\x18\x5d\x5b\x48\xa6\x27\xd0\xd5\x32\x5e\x9d\x47\xa8\x63\xd5\x38\x54\x8a\xc5\xe5\x62\xa5\xae\x08\x41\xb8\xc9\x86\xe1\xbf\x38\x97\x4b\x30\x0c\xe2\x72\x21\x5d\x0c\x83\x10\xf7\xeb\xf4\xd3\x22\x4e\x31\x2f\x24\x4b\x11\x2e\x16\x08\xec\x78\xed\x73\xd2\x6c\xcf\xad\x51\x9a\x03\x57\x63\x6e\x8d\xe1\xa7\x98\x88\x92\x2c\xdd\x6f\xd6\x71\x92\xe1\xf3\xe4\x20\x5d\x3d\x99\x61\xf2\x4c\xe3\xe4\x8b\xb8\x5d\x2d\xf0\x79\x32\xf9\x22\xfe\x0a\x00\x00\xff\xff\x2e\xf9\x92\xed\x72\x04\x00\x00")

func assetsDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_assetsDockerfile,
		"assets/Dockerfile",
	)
}

func assetsDockerfile() (*asset, error) {
	bytes, err := assetsDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/Dockerfile", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsEntrypointSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x52\xd1\x8e\xdb\x36\x10\x7c\xe7\x57\x4c\x22\x3f\x24\x80\x2b\xa5\xed\x43\x81\x4b\x2f\xa8\x6a\x9c\x13\xb7\xae\xcf\x90\x65\x04\x46\x10\x14\xb4\xb8\xb2\x88\xca\xa4\x40\x2e\x2d\xbb\x82\xfe\xbd\xa0\x7d\x87\xa4\x40\xd1\x3c\x72\x31\x3b\x3b\xc3\x99\xe4\x45\xb6\xd7\x26\xdb\x4b\xdf\x88\x44\x24\x20\xc3\xee\xd2\x59\x6d\x38\x7d\x9a\xcc\x6c\x77\x71\xfa\xd0\x30\x5e\x55\xaf\xf1\xc3\x9b\xef\x7f\xc2\x6f\xc1\x74\xa4\xf1\xbb\xec\xe5\xd1\xb2\xbd\xc2\xca\x46\x7b\xd4\xba\x25\x68\x8f\x4e\x3a\x86\xad\x51\x58\xa9\x34\x21\xff\x3b\x38\x4a\xaf\xb0\xaf\x27\x11\x59\x3b\x22\x78\x5b\x73\x2f\x1d\xdd\xe1\x62\x03\x2a\x69\xe0\x48\x69\xcf\x4e\xef\x03\x13\x34\x43\x1a\x95\x59\x87\xa3\x55\xba\xbe\x88\x24\x8e\x82\x51\xe4\xc0\x0d\x81\xc9\x1d\x7d\x3c\x17\x1f\xef\x57\x5b\xbc\x27\x43\x4e\xb6\x58\x87\x7d\xab\x2b\x2c\x75\x45\xc6\x13\xa4\x47\x17\x27\xbe\x21\x85\x7d\xa4\x89\x0b\xf3\xa8\x60\xf3\xa4\x00\x73\x1b\x8c\x92\xac\xad\x99\x82\x34\x37\xe4\x70\x22\xe7\xb5\x35\xf8\xf1\xf9\xc4\x13\xdf\x14\xd6\x89\x04\xaf\x24\x47\xd9\x0e\xb6\x8b\x6b\xaf\x21\xcd\x05\xad\xe4\x2f\x9b\xff\xed\xfc\x8b\x41\x05\x6d\xae\xc4\x8d\xed\x08\xdc\x48\x8e\xfe\x7a\xdd\xb6\xd8\x13\x82\xa7\x3a\xb4\x53\x91\x60\x1f\x18\x1f\x17\xe5\x87\xc7\x6d\x89\x7c\xb5\xc3\xc7\xbc\x28\xf2\x55\xb9\x7b\x8b\x5e\x73\x63\x03\x83\x4e\x74\x63\xd2\xc7\xae\xd5\xa4\xd0\x4b\xe7\xa4\xe1\x0b\x6c\x2d\x12\xfc\xf1\x50\xcc\x3e\xe4\xab\x32\xff\x75\xb1\x5c\x94\x3b\x58\x87\xf9\xa2\x5c\x3d\x6c\x36\x98\x3f\x16\xc8\xb1\xce\x8b\x72\x31\xdb\x2e\xf3\x02\xeb\x6d\xb1\x7e\xdc\x3c\xa4\xc0\x86\xa2\x28\x12\xc9\xff\xfd\x6d\x7d\x4d\xc7\x11\x14\xb1\xd4\xad\xbf\x79\xde\xd9\x00\xdf\xd8\xd0\x2a\x34\xf2\x44\x70\x54\x91\x3e\x91\x82\x44\x65\xbb\xcb\xb7\x33\x13\x09\x64\x6b\xcd\xe1\xea\xf0\xdf\x75\xc2\xa2\x86\xb1\x3c\x85\x27\xc2\xcf\x0d\x73\x77\x97\x65\x7d\xdf\xa7\x07\x13\x52\xeb\x0e\x59\x7b\xa3\xf0\xd9\xbb\x28\xe6\xb9\xa2\x4c\xc7\x2e\xa6\x13\x23\x90\xe6\xab\xbe\x47\x31\x12\xca\x56\x7f\x91\x43\x65\x0d\x4b\x6d\x62\xc1\x2c\xe8\x4c\x55\xec\xa1\x0b\x06\x9e\xa9\xbb\x9a\xd3\x35\x3e\x7d\xc2\x24\xc1\x8b\x7b\xbc\xc1\xe7\xcf\x6f\xa3\x13\x23\x70\x45\x63\xf2\x8b\xa8\xb5\x10\x74\xee\xac\x63\x2c\x67\x7f\xe6\xcb\xe5\xfd\x4c\x0c\x83\x93\xe6\x40\x98\x68\xa3\xe8\x3c\xc5\x84\x5a\x3a\x92\x61\x8f\xbb\x7b\xa4\x45\x30\xe3\x28\xa8\x6a\x2c\x5e\x0e\x43\x3a\x8e\x2f\x85\x6f\xf0\x5d\xf5\xfc\xc2\x3b\x64\x7c\xec\x32\xcf\xca\x06\x1e\x86\x1b\xcb\x38\xa6\x7c\x66\x31\x0c\x64\xd4\x38\x8a\x7f\x02\x00\x00\xff\xff\x32\xb6\xf1\x27\xd1\x03\x00\x00")

func assetsEntrypointShBytes() ([]byte, error) {
	return bindataRead(
		_assetsEntrypointSh,
		"assets/entrypoint.sh",
	)
}

func assetsEntrypointSh() (*asset, error) {
	bytes, err := assetsEntrypointShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/entrypoint.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsInitSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\x5d\x6f\xe4\x44\x10\x7c\xf7\xaf\x28\x6e\x79\x48\xa4\x78\xcd\x97\x40\x0a\x1f\x92\x89\x92\xbb\x85\xb0\x89\xf6\x43\xa7\x08\x10\x6a\x7b\xda\xeb\xd1\xcd\x4e\x5b\x33\x3d\x31\x46\xfc\x78\x34\xde\xbd\x3b\x90\x10\xdc\xdb\x4c\x4d\x77\x75\xd5\x74\x2d\x3e\xaa\x1a\xeb\xab\x86\x62\x5f\x2c\x8a\x05\xac\xb7\xba\x3c\x9f\x6f\x64\x98\x82\x3d\xf4\x8a\x8b\xf6\x12\x9f\x7d\xf2\xe9\x57\xf8\x21\xf9\x81\x2d\x7e\xa4\x91\x8e\xa2\x32\x97\xed\x7a\x1b\xd1\x59\xc7\xb0\x11\x03\x05\x85\x74\xd8\x08\x19\xcb\xa8\xff\x48\x81\x97\x73\xd9\xdf\x91\x5c\xd9\x05\x66\x44\xe9\x74\xa4\xc0\xd7\x98\x24\xa1\x25\x8f\xc0\xc6\x46\x0d\xb6\x49\xca\xb0\x0a\xf2\xa6\x92\x80\xa3\x18\xdb\x4d\x59\xa0\x22\x79\xc3\x01\xda\x33\x94\xc3\x31\xe6\x71\xf9\xf2\x72\xbd\xc7\x4b\xf6\x1c\xc8\xe1\x31\x35\xce\xb6\xb8\xb7\x2d\xfb\xc8\xa0\x88\x21\x23\xb1\x67\x83\x26\xd3\xe4\x86\xbb\xac\x60\x7b\x56\x80\x3b\x49\xde\x90\x5a\xf1\x57\x60\xab\x3d\x07\x3c\x73\x88\x56\x3c\x3e\x7f\x3b\xe2\xcc\x77\x05\x09\xc5\x02\x17\xa4\x59\x76\x80\x0c\xb9\xed\x12\xe4\x27\x38\xd2\xf7\x9d\xff\xee\xfc\xbd\x41\x03\xeb\x67\xe2\x5e\x06\x86\xf6\xa4\xd9\xdf\x68\x9d\x43\xc3\x48\x91\xbb\xe4\xae\x8a\x05\x9a\xa4\x78\xbd\xda\xbd\x7a\xd8\xef\x50\xaf\x9f\xf0\xba\xde\x6c\xea\xf5\xee\xe9\x6b\x8c\x56\x7b\x49\x0a\x7e\xe6\x13\x93\x3d\x0e\xce\xb2\xc1\x48\x21\x90\xd7\x09\xd2\x15\x0b\xfc\x74\xbb\xb9\x79\x55\xaf\x77\xf5\xf7\xab\xfb\xd5\xee\x09\x12\x70\xb7\xda\xad\x6f\xb7\x5b\xdc\x3d\x6c\x50\xe3\xb1\xde\xec\x56\x37\xfb\xfb\x7a\x83\xc7\xfd\xe6\xf1\x61\x7b\xbb\x04\xb6\x9c\x45\x71\xb1\xf8\xaf\xbf\xed\xe6\xed\x04\x86\x61\x25\xeb\xe2\xc9\xf3\x93\x24\xc4\x5e\x92\x33\xe8\xe9\x99\x11\xb8\x65\xfb\xcc\x06\x84\x56\x86\xe9\xff\x77\x56\x2c\x40\x4e\xfc\x61\x76\xf8\xcf\x38\x61\xd5\xc1\x8b\x5e\x21\x32\xe3\x9b\x5e\x75\xb8\xae\xaa\x71\x1c\x97\x07\x9f\x96\x12\x0e\x95\x3b\x51\xc4\xea\xbb\x2c\xe6\x6d\x44\x63\x1b\xec\xa0\xb0\x3e\x2a\x39\x17\x61\xa4\x7d\x93\x73\x24\x20\xec\x9b\xe4\x35\xc1\x8b\x99\xd3\x1a\x59\x51\x72\x51\xd0\xa0\xe5\x81\x15\x69\x30\xa4\xfc\xee\x7a\xa6\x40\x39\x21\x43\x1a\xc8\xc7\x41\x82\x96\x59\x4b\x44\x4b\x65\xcb\x41\x6d\x67\x5b\x52\x8e\x68\x53\x70\xef\x92\x5e\x0e\x41\x86\xfc\xca\xb1\x6c\xe5\x78\x14\x5f\xcc\xef\x65\x17\xb7\xf7\x98\x09\xae\xab\xca\xc8\xe8\x9d\x90\x59\x9e\x44\x2e\x5b\x39\x56\xce\xfa\xf4\x7b\x95\x66\xa5\xd5\x61\x38\xe0\xcf\x79\xfa\x1b\x9e\x40\xc6\xa0\x2c\x0a\x32\xa6\xcc\x50\xe0\x41\xa2\x55\x09\x13\x7e\x29\x80\x17\x86\x1b\xfc\x4c\xa1\xed\xbf\xa5\xa3\xf9\xf2\x8b\x5f\x3f\x78\xcc\xdc\xfe\xf1\x85\x8b\xcd\x6f\x81\x1d\x53\x64\x94\x6d\xbc\x9c\xe1\xa8\xd4\x38\x7e\xf1\x01\x7f\x74\x22\x2f\x5b\x2e\xfe\x0a\x00\x00\xff\xff\x24\xa7\x03\xff\x6e\x04\x00\x00")

func assetsInitShBytes() ([]byte, error) {
	return bindataRead(
		_assetsInitSh,
		"assets/init.sh",
	)
}

func assetsInitSh() (*asset, error) {
	bytes, err := assetsInitShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/init.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/Dockerfile": assetsDockerfile,
	"assets/entrypoint.sh": assetsEntrypointSh,
	"assets/init.sh": assetsInitSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"Dockerfile": &bintree{assetsDockerfile, map[string]*bintree{}},
		"entrypoint.sh": &bintree{assetsEntrypointSh, map[string]*bintree{}},
		"init.sh": &bintree{assetsInitSh, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

